seat <- read.csv("https://dvats.github.io/assets/course/mth208/seating.csv")
myrollno <- 231089
index <- which(seat[1] == myrollno)
seat[index,3]
seat[seat$Roll.No == myrollno]
seat[seat$Roll.No == myrollno]
seat <- read.csv("https://dvats.github.io/assets/course/mth208/seating.csv")
head(seat)
seat[1]
#alt
seat[seat$Roll.No == myrollno,]
# 1.a)
a <-  rbinom(n = 1000, size = 1, prob = 0.5)
sum(a)/1000
# 1.b)
b <-  rbinom(n = 1000, size = 1, prob = 0.3)
sum(b)/1000
# 1.a)
a <-  rbinom(n = 1000, size = 1, prob = 0.5)
sum(a)/1000
# 1.b)
b <-  rbinom(n = 1000, size = 1, prob = 0.3)
sum(b)/1000
# 1.a)
a <-  rbinom(n = 1000, size = 1, prob = 0.5)
sum(a)/1000
# 1.b)
b <-  rbinom(n = 1000, size = 1, prob = 0.3)
sum(b)/1000
# 1.a)
a <-  rbinom(n = 1000, size = 1, prob = 0.5)
sum(a)/1000
# 1.b)
b <-  rbinom(n = 1000, size = 1, prob = 0.3)
sum(b)/1000
# 1.a)
a <-  rbinom(n = 1000, size = 1, prob = 0.5)
sum(a)/1000
# 1.b)
b <-  rbinom(n = 1000, size = 1, prob = 0.3)
sum(b)/1000
library(imager)
library(tidyverse)
library(rvest)
html <- read_html("https://www.espn.com/tenis/rankings/_/tipo/wta")
tables <- html_table(tennis)
tables <- html_table(html)
tables
tables[2]
dim(tables)
tables[3]
tables[1]
table <- tables[[1]]
table
table <- tables[[1]]
clean.table <- data.frame("Rank" = table$RK,
"Name" = table$NAME,
"Points" = table$POINTS,
"Age" = table$AGE)
clean.table
points <- clean.table$Points
points
points <- gsub("," , "" , points)
points
points <- as.numeric(points)
points
clean.table
clean.table$Points <- points
clean.table
library(rvest)
library(tidyverse)
library(dplyr)
html <- read_html("https://en.wikipedia.org/wiki/List_of_most-subscribed_YouTube_channels")
tables <- html_table(html)
table <- as.data.frame(tables[[1]])
table
data <- table[1:50,c(4,5,6)]
data
data <- as.tibble(table[1:50,c(4,5,6)])
data
data <- as_tibble(table[1:50,c(4,5,6)])
data
filter(data,Primarylanguage[1] == 'H')
filter(data,Primarylanguage == 'English')
filter(data,Primarylanguage != 'English')
filter(data,Primarylanguage[1:5] == 'Hindi')
str <- 'apple'
str[1]
str[[1]]
filter(data, substr(Primarylanguage,start=1,end=5) == 'Hindi')
?substr
filter(data, substr(Primarylanguage,start=1,stop=5) == 'Hindi')
print(data)
print(data, n = 50)
?group_by
channels <- group_by(channels , Category)
channels <- filter(data, substr(Primarylanguage,start=1,stop=5) == 'Hindi')
channels <- group_by(channels , channels$Category)
channels
summarise(channels)
summarise(channels , mean(channels$`Subscribers(millions)` , na.rm = TRUE))
summarise(channels , mean(channels$Subscribers(millions)`))
channels
d
exit
edda
a <- 1
aa
summarise(channels , mean(channels$`Subscribers(millions)`))
channels <- group_by(channels , channels$Category)
channels
library(rvest)
library(tidyverse)
library(dplyr)
html <- read_html("https://en.wikipedia.org/wiki/List_of_most-subscribed_YouTube_channels")
html <- read_html("https://en.wikipedia.org/wiki/List_of_most-subscribed_YouTube_channels")
tables <- html_table(html)
table <- as.data.frame(tables[[1]])
data <- as_tibble(table[1:50,c(4,5,6)])
channels <- filter(data, substr(Primarylanguage,start=1,stop=5) == 'Hindi')
channels <- group_by(channels , channels$Category)
channels
channels <- filter(data, substr(Primarylanguage,start=1,stop=5) == 'Hindi')
channels <- group_by(channels , Category)
channels
?as_tibble
data <- as_tibble(table[1:50,c(4,5,6)] , .name_repair = c("subs","lang","category"))
data <- as_tibble(table[1:50,c(4,5,6)] , column_name = c("subs","lang","category"))
data
html <- read_html("https://en.wikipedia.org/wiki/List_of_most-subscribed_YouTube_channels")
tables <- html_table(html)
table <- as.data.frame(tables[[1]])
data <- as_tibble(table[1:50,c(4,5,6)] , column_name = c("subs","lang","category"))
data
channels <- filter(data, substr(Primarylanguage,start=1,stop=5) == 'Hindi')
data <- as_tibble(table[1:50,c(4,5,6)])
channels <- filter(data, substr(Primarylanguage,start=1,stop=5) == 'Hindi')
channels <- group_by(channels , Category)
channels
summarise(channels , mean(`Subscribers(millions)`))
dplyr::last_dplyr_warnings()
summarise(channels , mean(channels[,1]))
channels[,1]
mean(channels$`Subscribers(millions)`)
channels$`Subscribers(millions)` %>% as.numeric()
channels$`Subscribers(millions)` <- as.numeric(channels$`Subscribers(millions)`)
summarise(channels , mean(channels$`Subscribers(millions)`))
library(rvest)
library(tidyverse)
library(dplyr)
html <- read_html("https://en.wikipedia.org/wiki/List_of_most-subscribed_YouTube_channels")
tables <- html_table(html)
table <- as.data.frame(tables[[1]])
data <- as_tibble(table[1:50,c(4,5,6)])
channels <- filter(data, substr(Primarylanguage,start=1,stop=5) == 'Hindi')
channels <- group_by(channels , Category)
channels$`Subscribers(millions)` <- as.numeric(channels$`Subscribers(millions)`)
summarise(channels , mean(channels$`Subscribers(millions)`))
summarise(channels , mean(`Subscribers(millions)`))
summarise(channels , mean(`Subscribers(millions)`,na.rm = TRUE))
summarise(channels , "MEAN" =  mean(`Subscribers(millions)`,na.rm = TRUE))
summarise(channels , "COUNT" = n() ,MEAN" =  mean(`Subscribers(millions)`,na.rm = TRUE))
summarise(channels , "COUNT" = n() , "MEAN" =  mean(`Subscribers(millions)`,na.rm = TRUE))
summarise(channels , "COUNT" = n() , "MEAN" =  mean(`Subscribers(millions)`,na.rm = TRUE))
summarise(channels , "COUNT" = n() , "MEAN Subs" =  mean(`Subscribers(millions)`,na.rm = TRUE))
summarise(channels , "COUNT" = n() , "MEAN_SUBSCRIBERS" =  mean(`Subscribers(millions)`,na.rm = TRUE))
summarise(channels , "COUNT" = n() , "MEAN.SUBSCRIBERS" =  mean(`Subscribers(millions)`,na.rm = TRUE))
packages = c("shiny", "tidyverse", "hexbin")
install.packages(packages, repos = "https://cran.rstudio.com/")
library(shiny)
runGitHub("ballr", "toddwschneider")
runApp('mth-208-course-project-24group-1/ShinyApp')
shiny::runApp('mth-208-course-project-24group-1/ShinyApp')
runApp('mth-208-course-project-24group-1/ShinyApp')
runApp('mth-208-course-project-24group-1/ShinyApp')
runApp('mth-208-course-project-24group-1/ShinyApp')
runApp('mth-208-course-project-24group-1/ShinyApp')
runApp('mth-208-course-project-24group-1/ShinyApp')
library(shiny); runApp('Dashboard.r')
install.packages("plotly")
runApp('Dashboard.r')
setwd("D:/Courses/MTH208/mth-208-course-project-24group-1")
read.csv("Data/Bundesliga/Bundesliga_24/Squad/win_loss.csv")
dat <- read.csv("Data/Bundesliga/Bundesliga_24/Squad/win_loss.csv")
shiny::runApp('ShinyApp')
# Ensure the columns are numeric
dat$Wins <- as.numeric(dat$Wins)
dat$Home_Wins <- as.numeric(dat$Home_Wins)
data <- data.frame(dat$Wins,dat$Home_Wins,"Name" = c(paste0(league, "_", season_short)))
league <- 'Bundesliga'
season_short <- 24
data <- data.frame(dat$Wins,dat$Home_Wins,"Name" = c(paste0(league, "_", season_short)))
data
# Append to main Data
Data <<- rbind(Data, data)
# Initialize an empty data frame to store combined data
Data <- data.frame()
# Append to main Data
Data <<- rbind(Data, data)
plot(Data$Wins, Data$Home_Wins,
main = "Wins vs. Home Wins",
xlab = "Wins",
ylab = "Home Wins",
type = "p",
col = Data$name)
runApp('ShinyApp')
plot(Data$Wins, Data$Home_Wins,
main = "Wins vs. Home Wins",
xlab = "Wins",
ylab = "Home Wins",
xlim = c(1,100), ylim = c(1,100),
type = "p",
col = Data$name, pch = 19)
View(Data)
data <- data.frame("Wins" = dat$Wins,"Home_Wins" = dat$Home_Wins,"Name" = c(paste0(league, "_", season_short)))
# Append to main Data
Data <<- rbind(Data, data)
# Check if file exists and read if available
if (file.exists(file_path)) {
dat <- read.csv(file_path)
# ex : read.csv("Data/Bundesliga/Bundesliga_24/Squad/win_loss.csv")
# Ensure the columns are numeric
dat$Wins <- as.numeric(dat$Wins)
dat$Home_Wins <- as.numeric(dat$Home_Wins)
data <- data.frame("Wins" = dat$Wins,"Home_Wins" = dat$Home_Wins,"Name" = c(paste0(league, "_", season_short)))
# Append to main Data
Data <<- rbind(Data, data)
} else {
warning(paste("File not found:", file_path))
}
# Initialize an empty data frame to store combined data
Data <- data.frame()
# Append to main Data
Data <<- rbind(Data, data)
plot(Data$Wins, Data$Home_Wins,
main = "Wins vs. Home Wins",
xlab = "Wins",
ylab = "Home Wins",
xlim = c(1,100), ylim = c(1,100),
type = "p",
col = Data$name, pch = 19)
plot(Data$Wins, Data$Home_Wins,
main = "Wins vs. Home Wins",
xlab = "Wins",
ylab = "Home Wins",
xlim = c(1,100), ylim = c(1,100),
type = "p",
col = Data$Name, pch = 19)
plot(Data$Wins, Data$Home_Wins,
main = "Wins vs. Home Wins",
xlab = "Wins",
ylab = "Home Wins",
xlim = c(1,100), ylim = c(1,100),
type = "p",
col = unique(Data$Name), pch = 19)
# Ensure there is data to plot
if (nrow(Data) > 0) {
plot(Data$Wins, Data$Home_Wins,
main = "Wins vs. Home Wins",
xlab = "Wins",
ylab = "Home Wins",
xlim = c(1,100), ylim = c(1,100),
type = "p",
pch = 19)
legend(unique(Data$Name))
} else {
plot.new()
text(0.5, 0.5, "No data available for selected leagues and seasons", cex = 1.5)
}
legend(unique(Data$Name))
legend(legend = unique(Data$Name))
legend(legend = unique(Data$Name))
legend(legend = Data$Name)
plot(Data$Wins, Data$Home_Wins,
main = "Wins vs. Home Wins",
xlab = "Wins",
ylab = "Home Wins",
type = "p",
pch = 19)
legend(legend = Data$Name)
plot(Data$Wins, Data$Home_Wins,
main = "Wins vs. Home Wins",
xlab = "Wins",
ylab = "Home Wins",
type = "p",
pch = 19)
legend("topright" , col = c(1,2,3) , legend = Data$Name)
legend("topright" , col = c(1,2,3) , legend = unique(Data$Name))
library(dplyr)
Data <- group_by(Data,Data$Name)
plot(Data$Wins, Data$Home_Wins,
main = "Wins vs. Home Wins",
xlab = "Wins",
ylab = "Home Wins",
type = "p",
pch = 19)
legend("topright" , col = c(1,2,3) , legend = unique(Data$Name))
unique_names <- unique(Data$Name)
name_colors <- rainbow(length(unique_names))
names(name_colors) <- unique_names
# Create a color vector for plotting based on the Name of each row
Data$color <- name_colors[Data$Name]
# Plot Wins vs. Home Wins with custom colors and point types
plot(
Data$Wins, Data$Home_Wins,
main = "Wins vs. Home Wins",
xlab = "Wins",
ylab = "Home Wins",
pch = 19,  # Filled circles
col = Data$color
)
# Add a legend in the top-right corner
legend(
"topright",
legend = unique_names,
col = name_colors,
pch = 19,  # Same point type as plot
title = "Teams"
)
runApp('ShinyApp')
